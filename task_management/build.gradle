plugins {
	id 'org.springframework.boot' 
	id 'io.spring.dependency-management'
	id 'java'
	id 'jacoco'
}

/**
group = 'com.wellsfargo.serv_req_center'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
	mavenCentral()
}

**/


dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	compile 'org.springframework.boot:spring-boot-starter-security'
	
	implementation project(":authentication_service")
	
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'
	
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation('org.springframework.security:spring-security-test')
}


//bootJar.dependsOn 'copyBootJar'

//task copyBootJar(type: Copy){
//print "TEST + ${rootProject.buildDir}"
//	print "TEST 2 + ${buildDir}"
//	from("${buildDir}\\libs\\"){
//		include "*.jar"
//	}
//	into "${rootProject.buildDir}\\lib\\jars"
//}

//copyBootJar.dependsOn bootJar

//run right after-> gradle clean build
// to skip test use cmd -> gradle build -x test
test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport	//run right after-> gradle clean build
}
jacocoTestReport {	//configuration for report formats.
    dependsOn test
     reports {
        xml.enabled false
		csv.enabled true
		html.enabled true
    }
    finalizedBy jacocoTestCoverageVerification //run right after jacocoTestReport
}
jacocoTestCoverageVerification {   //Verifies the code coverage rule if enabled.
	violationRules {
		rule {
			enabled = false // false or true
			limit {
				minimum = 0.25
			}
		}
	}
}
jacoco {
    toolVersion = "0.8.5"
    reportsDir = file("$buildDir/reports/jacoco")
}
